#6가지의 요소 조작 메서드

//1.push, 배열의 맨 뒤에 새로운 요소 추가
//push메서드는 값을 추가한 전체 길이를 반환
let arr1 = [1, 2, 3];
const newlenght = arr1.push(4, 5, 6, 7);

//2.pop, 배열의 맨 뒤에 요소를 제거
//pop메서드는 제거한 값 자체를 반환함
let arr2 = [1, 2, 3];
const poppeditem = arr2.pop();

//3.shift, 배열의 맨 앞에있는 요소를 제거
//shift메서드는 제거한 맨 앞의 값을 반환
let arr3 = [1, 2, 3];
const shifteditem = arr3.shift();

//4.unshift, 배열의 맨 앞에 새로운 요소 추가
//unshift메서드는 맨앞에 값 추가한 전체 길이 반환
let arr4 = [1, 2, 3];
const unshiftlength = arr4.unshift(0);

//shift, unshift는 push, pop보다 속도가 느림
// -> 값의 순서에 따라 index가 있는데 뒤에서 작업할때는 문제발생하지 않는데
// -> 맨 앞의 값을 작업할때는 인덱스가 한칸씩 옮겨야되고, 새로운 요소 추가시 작업량이 많기 때문

//5.slice, 배열의 특정 범위를 잘라서 새로운 배열로 반환
//slice(시작인덱스, 마지막인덱스 + 1)로 설정해야됨
let arr5 = [1, 2, 3, 4, 5];
console.log(arr5.slice(2, 5)); // [3,4,5] 출력

//6.concat, 두개의 서로 다른 배열을 이어붙여 새로운 배열 반환
let arr6 = [1, 2];
let arr7 = [3, 4];
let concatedarr = arr6.concat(arr7);
